}
q()
m_threshold(count_unique_words[i])
m_threshold(count_unique_words[1])
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
browser()
#find the location of the words that contains punctuation(s).
location <- grep(ls[i],x,fixed=TRUE)
x[location] <- gsub(ls[i],"",x[location], fixed=TRUE) ## get rid of punctuation
lenA <- lenA + length(location)
Totallen <- lenA + lenx
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location + 1:length(location)
xs[A] <- ls[i]
if(is.integer0(location)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text <- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text)
vector_match <- match(lower_splited_text,unique_words)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
m <- 1000
epsilon <- 200
# The threshold function
m_threshold <- function(x){
m <- 1000
epsilon <- 200
if((x<=m+epsilon) & (x>=m-epsilon)){
return(TRUE)
} else {
return(FALSE)
}
}
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE UNIQUE XXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location <- grep(ls[i],x,fixed=TRUE)
x[location] <- gsub(ls[i],"",x[location], fixed=TRUE) ## get rid of punctuation
lenA <- lenA + length(location)
Totallen <- lenA + lenx
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location + 1:length(location)
xs[A] <- ls[i]
if(is.integer0(location)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text <- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text)
vector_match <- match(lower_splited_text,unique_words)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
m <- 1000
epsilon <- 200
# The threshold function
m_threshold <- function(x){
m <- 1000
epsilon <- 200
if((x<=m+epsilon) & (x>=m-epsilon)){
return(TRUE)
} else {
return(FALSE)
}
}
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE UNIQUE XXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
location_threshold
count_unique_words
location_threshold <- NULL
for(i in 1:len_splited) {
if ((count_unique_words[i]<=m+epsilon)&(count_unique_words[i]>=m-epsilon)){
append(location_threshold, i)
}
}
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words)){
append(location_threshold, i)
}
}
location_threshold
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words)){
append(location_threshold, i)
}
}
x<-c(1:4)
x
grep(m_threshold(count_unique_words),count_unique_words)
m_threshold(count_unique_words)
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
location_threshold
location_threshold <- NULL
for(i in 1:len_splited) {
browser()
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
i
m_threshold(count_unique_words[i])
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
if(TRUE){cat(1)}
m_threshold(count_unique_words[i])
i
m_threshold(count_unique_words[23213])
count_unique_words[23213]
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location <- grep(ls[i],x,fixed=TRUE)
x[location] <- gsub(ls[i],"",x[location], fixed=TRUE) ## get rid of punctuation
lenA <- lenA + length(location)
Totallen <- lenA + lenx
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location + 1:length(location)
xs[A] <- ls[i]
if(is.integer0(location)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text <- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text)
vector_match <- match(lower_splited_text,unique_words)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
m <- 1000
epsilon <- 200
# The threshold function
m_threshold <- function(x){
m <- 1000
epsilon <- 200
if((x<=m+epsilon) & (x>=m-epsilon)){
return(TRUE)
} else {
return(FALSE)
}
}
location_threshold <- NULL
for(i in 1:len_splited) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE UNIQUE XXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
count_unique_words[23213]
vector_match[3]
unique_words[23213]
unique_words[23213]
location <- grep(NA,unique_words,fixed=TRUE)
location
unique_words
location <- grep(NA,unique_words,fixed=TRUE)
len_splited
unique_words[23213]
unique_words[23212]
unique_words[23214]
unique_words[23215]
length(unique_words)
location_threshold <- NULL
for(i in 1:len_unique) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
len_unique <- length(unique_words)
location_threshold <- NULL
for(i in 1:len_unique) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
location_threshold
length(count_unique_words)
count_unique_words
count_unique_words[443]
m_threshold(count_unique_words[443])
m_threshold <- function(x){
m <- 1000
epsilon <- 500
if((x<=m+epsilon) & (x>=m-epsilon)){
return(TRUE)
} else {
return(FALSE)
}
}
len_unique <- length(unique_words)
location_threshold <- NULL
for(i in 1:len_unique) {
if (m_threshold(count_unique_words[i])){
append(location_threshold, i)
}
}
location_threshold
append(location_threshold, 3)
append(location_threshold, 5)
append(location_threshold, 5)
location_threshold <- append(location_threshold, 5)
location_threshold <- append(location_threshold, 8)
location_threshold
len_unique <- length(unique_words)
location_threshold <- NULL
for(i in 1:len_unique) {
if (m_threshold(count_unique_words[i])){
location_threshold <- append(location_threshold, i)
}
}
location_threshold
count_unique_words
splited_text
len_splited
a="?"
x=c("1","?",">")
which(a!=x)
x=c("1","15?",">")
which(a!=x)
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location <- grep(ls[i],x,fixed=TRUE)
x[location] <- gsub(ls[i],"",x[location], fixed=TRUE) ## get rid of punctuation
lenA <- lenA + length(location)
Totallen <- lenA + lenx
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location + 1:length(location)
xs[A] <- ls[i]
if(is.integer0(location)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text <- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
m <- 1000
epsilon <- 200
# The threshold function
m_threshold <- function(x){
m <- 1000
epsilon <- 500
if((x<=m+epsilon) & (x>=m-epsilon)){
return(TRUE)
} else {
return(FALSE)
}
}
len_unique <- length(unique_words)
location_threshold <- NULL
for(i in 1:len_unique) {
if (m_threshold(count_unique_words[i])){
location_threshold <- append(location_threshold, i)
}
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE UNIQUE XXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
vector_match
length(vector_match)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
count_unique_words
Order <- order(count_unique_words)
Order
most_common_word <- Order[length(count_unique_words)-1000,length(count_unique_words)]
most_common_word <- Order[length(count_unique_words)-1000:length(count_unique_words)]
most_common_word
?tabulate
tabulate(c(2,3,5))
Order[length(count_unique_words)]
count_unique_words[Order[length(count_unique_words)]]
count_unique_words
Order <- order(count_unique_words)
most_common_word <- Order[length(count_unique_words)-1000:length(count_unique_words)]
b <- unique_words[most_common_word]
b
Order <- order(count_unique_words)
most_common_word <- Order[length(count_unique_words)-1000:length(count_unique_words)]
b <- unique_words[most_common_word]
b
b[1001]
b[1000]
length(most_common_word)
length(count_unique_words)-1000
length(count_unique_words)-1000:length(count_unique_words)
most_common_word
v <- c(1:6)
v
v[3:6]
Order <- order(count_unique_words)
most_common_word <- Order[(length(Order)-1000):length(Order)]
b <- unique_words[most_common_word]
most_common_word
length(most_common_word)
most_common_word <- Order[(length(Order)-999):length(Order)]
length(most_common_word)
most_common_word
b <- unique_words[most_common_word]
b
length(b)
common_match <- match(lower_splited_text,b)
common_match
b[971]
lower_splited_text[1]
?cbind
cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
NA +6
?rowSums
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
xx
x
rowSums(x)
shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
sum_shifted_pair

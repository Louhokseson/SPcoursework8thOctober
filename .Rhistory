shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
#find the location of NA.
location_NA <- is.na(sum_shifted_pair)
location_common_pair <- grep(FALSE,location_NA)
#define a 1000 by 1000 matrix with elements 0
A<-matrix(0, nrow= m, ncol=m)
for (i in 1:length(location_common_pair)){
A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] <- A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] + 1
}
#Let the sum of each row equal to one
for (i in 1:m){
A[i,] <- A[i,]/sum(A[i,])
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#random selection from b
indexes_b_chosen<-1:length(b)
rand_initial <- sample(indexes_b_chosen,1)
random_sample_index <- rep(0,50)
random_sample_index[1] <-  rand_initial
for (i in 2:50)
{
print(rand_initial)
rand_initial <- sample(1:length(b),1,prob=A[rand_initial,])
random_sample_index[i] <- rand_initial
}
cat(b[random_sample_index])
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
for (i in 2:50)
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory", ",")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location_has_punct <- grep(ls[i],x,fixed=TRUE)
location_spe_punct <- which(x == ls[i])
#(contain punctuation) location_has_punct >= location_spe_punct (single punctuation)
#location_word_punct is the location that words contain the punctuation
Intersaction <- location_has_punct%in%location_spe_punct
location_word_punct <- location_has_punct[which(Intersaction == FALSE)]
#we clear the punctuation from the words have that punctuation
x[location_word_punct] <- gsub(ls[i],"",x[location_word_punct], fixed=TRUE)
#The length of already spilted punctuation
lenA <- lenA + length(location_word_punct)
#update the total length for each loop
Totallen <- lenA + lenx
#A is the location for a punctuation to insert in this loop
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location_word_punct + 1:length(location_word_punct)
xs[A] <- ls[i]
#avoid the case that there is no punctuation in each loop
if(is.integer0(location_has_punct)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text<- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text,incomparables = NULL)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
#XXXXXXXXXXXXX From small to large XXXXXXXXXXXXXXXXXXX
m <- 1036
Order <- order(count_unique_words)
most_common_word <- Order[(length(Order)- m + 1):length(Order)]
b <- unique_words[most_common_word]
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
common_match <- match(lower_splited_text,b)
shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
#find the location of NA.
location_NA <- is.na(sum_shifted_pair)
location_common_pair <- grep(FALSE,location_NA)
#define a M by M matrix with elements 0
A<-matrix(0, nrow= m, ncol=m)
# if i,j is a common_pair, A[i,j] += 1
for (i in 1:length(location_common_pair)){
A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] <- A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] + 1
}
#Let the sum of each row equal to one
for (i in 1:m){
A[i,] <- A[i,]/sum(A[i,])
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
indexes_b_chosen<-1:length(b)
#random selection from b
rand_initial <- sample(indexes_b_chosen,1)
#generate a vector to store the printed index
random_sample_index <- rep(0,50)
random_sample_index[1] <-  rand_initial
for (i in 2:50)
{
print(rand_initial)
rand_initial <- sample(1:length(b),1,prob=A[rand_initial,])
random_sample_index[i] <- rand_initial
}
cat(b[random_sample_index])
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
which[a=="ass"]
which(a=="ass")
which(a=="ass")
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory", ",")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location_has_punct <- grep(ls[i],x,fixed=TRUE)
location_spe_punct <- which(x == ls[i])
#(contain punctuation) location_has_punct >= location_spe_punct (single punctuation)
#location_word_punct is the location that words contain the punctuation
Intersaction <- location_has_punct%in%location_spe_punct
location_word_punct <- location_has_punct[which(Intersaction == FALSE)]
#we clear the punctuation from the words have that punctuation
x[location_word_punct] <- gsub(ls[i],"",x[location_word_punct], fixed=TRUE)
#The length of already spilted punctuation
lenA <- lenA + length(location_word_punct)
#update the total length for each loop
Totallen <- lenA + lenx
#A is the location for a punctuation to insert in this loop
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location_word_punct + 1:length(location_word_punct)
xs[A] <- ls[i]
#avoid the case that there is no punctuation in each loop
if(is.integer0(location_has_punct)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text<- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text,incomparables = NULL)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
#XXXXXXXXXXXXX From small to large XXXXXXXXXXXXXXXXXXX
m <- 1036
Order <- order(count_unique_words)
most_common_word <- Order[(length(Order)- m + 1):length(Order)]
b <- unique_words[most_common_word]
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
common_match <- match(lower_splited_text,b)
shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
#find the location of NA.
location_NA <- is.na(sum_shifted_pair)
location_common_pair <- grep(FALSE,location_NA)
#define a M by M matrix with elements 0
A<-matrix(0, nrow= m, ncol=m)
# if i,j is a common_pair, A[i,j] += 1
for (i in 1:length(location_common_pair)){
A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] <- A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] + 1
}
#Let the sum of each row equal to one
for (i in 1:m){
A[i,] <- A[i,]/sum(A[i,])
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
indexes_b_chosen<-1:length(b)
#random selection from b
rand_initial <- sample(indexes_b_chosen,1)
#generate a vector to store the printed index
random_sample_index <- rep(0,50)
random_sample_index[1] <-  rand_initial
for (i in 2:50)
{
print(rand_initial)
rand_initial <- sample(1:length(b),1,prob=A[rand_initial,])
random_sample_index[i] <- rand_initial
}
cat(b[random_sample_index])
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
which(a=="ass")
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory", ",")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location_has_punct <- grep(ls[i],x,fixed=TRUE)
location_spe_punct <- which(x == ls[i])
#(contain punctuation) location_has_punct >= location_spe_punct (single punctuation)
#location_word_punct is the location that words contain the punctuation
Intersaction <- location_has_punct%in%location_spe_punct
location_word_punct <- location_has_punct[which(Intersaction == FALSE)]
#we clear the punctuation from the words have that punctuation
x[location_word_punct] <- gsub(ls[i],"",x[location_word_punct], fixed=TRUE)
#The length of already spilted punctuation
lenA <- lenA + length(location_word_punct)
#update the total length for each loop
Totallen <- lenA + lenx
#A is the location for a punctuation to insert in this loop
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location_word_punct + 1:length(location_word_punct)
xs[A] <- ls[i]
#avoid the case that there is no punctuation in each loop
if(is.integer0(location_has_punct)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text<- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text,incomparables = NULL)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
#XXXXXXXXXXXXX From small to large XXXXXXXXXXXXXXXXXXX
m <- 1036
Order <- order(count_unique_words)
most_common_word <- Order[(length(Order)- m + 1):length(Order)]
b <- unique_words[most_common_word]
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
common_match <- match(lower_splited_text,b)
shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
#find the location of NA.
location_NA <- is.na(sum_shifted_pair)
location_common_pair <- grep(FALSE,location_NA)
#define a M by M matrix with elements 0
A<-matrix(0, nrow= m, ncol=m)
# if i,j is a common_pair, A[i,j] += 1
for (i in 1:length(location_common_pair)){
A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] <- A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] + 1
}
#Let the sum of each row equal to one
for (i in 1:m){
A[i,] <- A[i,]/sum(A[i,])
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
indexes_b_chosen<-1:length(b)
#random selection from b
rand_initial <- sample(indexes_b_chosen,1)
#generate a vector to store the printed index
random_sample_index <- rep(0,50)
random_sample_index[1] <-  rand_initial
for (i in 2:50)
{
print(rand_initial)
rand_initial <- sample(1:length(b),1,prob=A[rand_initial,])
random_sample_index[i] <- rand_initial
}
cat(b[random_sample_index])
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXX The PATH XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
setwd("D:/EDIN/Sem1/StatisticalProgramming/Coursework1/SPcoursework8thOctober")
# setwd("put/your/local/repo/location/here")
# setwd("put/your/local/repo/location/here")
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
a <- scan("1581-0.txt",what="character",skip=156)
n <- length(a)
a <- a[-((n-2909):n)] ## strip license
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX THE SPLIT-PUNCT XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# test = c("An", "omnishambles,", "in", "a", "headless", "chicken", "factory", ",")
is.integer0 <- function(x)
{
is.integer(x) && length(x) == 0L
}
split_punct <- function(x){
#The function should search
#for each word containing the punctuation mark, remove it from the word,
#and add the mark as a new entry in the vector of words,
#after the word it came from.
ls <- c(",", ".", ";", "!", ":", "?", "’")
lenl <- length(ls)
lenA <- 0
lenx <- length(x)
for(i in 1:lenl) {
#browser()
#find the location of the words that contains punctuation(s).
location_has_punct <- grep(ls[i],x,fixed=TRUE)
location_spe_punct <- which(x == ls[i])
#(contain punctuation) location_has_punct >= location_spe_punct (single punctuation)
#location_word_punct is the location that words contain the punctuation
Intersaction <- location_has_punct%in%location_spe_punct
location_word_punct <- location_has_punct[which(Intersaction == FALSE)]
#we clear the punctuation from the words have that punctuation
x[location_word_punct] <- gsub(ls[i],"",x[location_word_punct], fixed=TRUE)
#The length of already spilted punctuation
lenA <- lenA + length(location_word_punct)
#update the total length for each loop
Totallen <- lenA + lenx
#A is the location for a punctuation to insert in this loop
xs <- rep(0,Totallen) ## vector to store the single digits
A <- location_word_punct + 1:length(location_word_punct)
xs[A] <- ls[i]
#avoid the case that there is no punctuation in each loop
if(is.integer0(location_has_punct)){
xs <-x
} else {
xs[-A] <- x
}
x <- xs
}
return(x)
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX SPLIT-PUNCT END XXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXX M COMMONLY OCCURRING WORDS XXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
splited_text<- split_punct(a)
len_splited <- length(splited_text)
lower_splited_text <- tolower(splited_text)
unique_words <- unique(lower_splited_text,incomparables = NULL)
vector_match <- match(lower_splited_text,unique_words,incomparables = NULL)
cat(length(vector_match) == length(splited_text))
count_unique_words <- tabulate(vector_match)
#XXXXXXXXXXXXX From small to large XXXXXXXXXXXXXXXXXXX
m <- 1036
Order <- order(count_unique_words)
most_common_word <- Order[(length(Order)- m + 1):length(Order)]
b <- unique_words[most_common_word]
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXX M COMMONLY OCCURRING WORDS END  XXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
common_match <- match(lower_splited_text,b)
shifted_pair <- cbind(common_match[1:length(common_match)-1],common_match[2:length(common_match)])
sum_shifted_pair <- rowSums(shifted_pair)
#find the location of NA.
location_NA <- is.na(sum_shifted_pair)
location_common_pair <- grep(FALSE,location_NA)
#define a M by M matrix with elements 0
A<-matrix(0, nrow= m, ncol=m)
# if i,j is a common_pair, A[i,j] += 1
for (i in 1:length(location_common_pair)){
A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] <- A[shifted_pair[location_common_pair[i],1], shifted_pair[location_common_pair[i],2]] + 1
}
#Let the sum of each row equal to one
for (i in 1:m){
A[i,] <- A[i,]/sum(A[i,])
}
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 7  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
indexes_b_chosen<-1:length(b)
#random selection from b
rand_initial <- sample(indexes_b_chosen,1)
#generate a vector to store the printed index
random_sample_index <- rep(0,50)
random_sample_index[1] <-  rand_initial
for (i in 2:50)
{
print(rand_initial)
rand_initial <- sample(1:length(b),1,prob=A[rand_initial,])
random_sample_index[i] <- rand_initial
}
cat(b[random_sample_index])
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 8  END XXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXX  Question 9  XXXXXXXXXXXXXXXXXXXXX
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# No tolower
unique_nolower_words <- unique(splited_text,incomparables = NULL)
unique_nolower_words
unique_nolower_words[[:upper:]]
unique_nolower_words[[:upper:]]
